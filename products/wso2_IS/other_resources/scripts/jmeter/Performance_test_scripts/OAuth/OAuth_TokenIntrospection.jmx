	<?xml version="1.0" encoding="UTF-8"?>
	<jmeterTestPlan version="1.2" properties="3.1" jmeter="3.1 r1770033">
	  <hashTree>
	    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Token Validation with Introspect Endpoint" enabled="true">
	      <stringProp name="TestPlan.comments">This load test can be used to load tenants, user roles per tenant and users per role at once</stringProp>
	      <boolProp name="TestPlan.functional_mode">false</boolProp>
	      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
	      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
		<collectionProp name="Arguments.arguments"/>
	      </elementProp>
	      <stringProp name="TestPlan.user_define_classpath"></stringProp>
	    </TestPlan>
	    <hashTree>
	      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Test Variables" enabled="true">
		<collectionProp name="Arguments.arguments">
		  <elementProp name="noOfThreads" elementType="Argument">
		    <stringProp name="Argument.name">noOfThreads</stringProp>
		    <stringProp name="Argument.value">400</stringProp>
		    <stringProp name="Argument.metadata">=</stringProp>
		  </elementProp>
		  <elementProp name="tokenFilePath" elementType="Argument">
		    <stringProp name="Argument.name">tokenFilePath</stringProp>
		    <stringProp name="Argument.value">/home/ubuntu/scripts/ISJmeterPerfScripts/src/test/jmeter/tokenFile.csv</stringProp>
		    <stringProp name="Argument.metadata">=</stringProp>
		  </elementProp>
		</collectionProp>
		<stringProp name="TestPlan.comments">test</stringProp>
	      </Arguments>
	      <hashTree/>
	      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Server Variables" enabled="true">
		<collectionProp name="Arguments.arguments">
		  <elementProp name="is_host" elementType="Argument">
		    <stringProp name="Argument.name">is_host</stringProp>
		    <stringProp name="Argument.value">is540.iam.org</stringProp>
		    <stringProp name="Argument.metadata">=</stringProp>
		    <stringProp name="Argument.desc">IS server host</stringProp>
		  </elementProp>
		  <elementProp name="is_port" elementType="Argument">
		    <stringProp name="Argument.name">is_port</stringProp>
		    <stringProp name="Argument.value">9443</stringProp>
		    <stringProp name="Argument.metadata">=</stringProp>
		    <stringProp name="Argument.desc">IS serveer port</stringProp>
		  </elementProp>
		  <elementProp name="adminCredentials" elementType="Argument">
		    <stringProp name="Argument.name">adminCredentials</stringProp>
		    <stringProp name="Argument.value">YWRtaW46YWRtaW4=</stringProp>
		    <stringProp name="Argument.desc">Base64 encoded admin credentials</stringProp>
		    <stringProp name="Argument.metadata">=</stringProp>
		  </elementProp>
		</collectionProp>
		<stringProp name="TestPlan.comments">test</stringProp>
	      </Arguments>
	      <hashTree/>
	      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
		<collectionProp name="Arguments.arguments">
		  <elementProp name="adminCredentials" elementType="Argument">
		    <stringProp name="Argument.name">adminCredentials</stringProp>
		    <stringProp name="Argument.value">YWRtaW46YWRtaW4=</stringProp>
		    <stringProp name="Argument.desc">Base64 encoded admin credentials</stringProp>
		    <stringProp name="Argument.metadata">=</stringProp>
		  </elementProp>
		  <elementProp name="scope" elementType="Argument">
		    <stringProp name="Argument.name">scope</stringProp>
		    <stringProp name="Argument.value">default</stringProp>
		    <stringProp name="Argument.metadata">=</stringProp>
		  </elementProp>
		  <elementProp name="usernamePrefix" elementType="Argument">
		    <stringProp name="Argument.name">usernamePrefix</stringProp>
		    <stringProp name="Argument.value">user100</stringProp>
		    <stringProp name="Argument.metadata">=</stringProp>
		  </elementProp>
		  <elementProp name="password" elementType="Argument">
		    <stringProp name="Argument.name">password</stringProp>
		    <stringProp name="Argument.value">password</stringProp>
		    <stringProp name="Argument.metadata">=</stringProp>
		  </elementProp>
		</collectionProp>
		<stringProp name="TestPlan.comments">test</stringProp>
	      </Arguments>
	      <hashTree/>
	      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Validate Token with Introspect Endpoint" enabled="true">
		<stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
		<elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
		  <boolProp name="LoopController.continue_forever">false</boolProp>
		  <intProp name="LoopController.loops">-1</intProp>
		</elementProp>
		<stringProp name="ThreadGroup.num_threads">${noOfThreads}</stringProp>
		<stringProp name="ThreadGroup.ramp_time">10</stringProp>
		<longProp name="ThreadGroup.start_time">1394208748000</longProp>
		<longProp name="ThreadGroup.end_time">1394208748000</longProp>
		<boolProp name="ThreadGroup.scheduler">true</boolProp>
		<stringProp name="ThreadGroup.duration">3600</stringProp>
		<stringProp name="ThreadGroup.delay">10</stringProp>
		<boolProp name="ThreadGroup.delayedStart">true</boolProp>
	      </ThreadGroup>
	      <hashTree>
		<CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Token Infor CSV" enabled="true">
		  <stringProp name="delimiter">,</stringProp>
		  <stringProp name="fileEncoding"></stringProp>
		  <stringProp name="filename">${tokenFilePath}</stringProp>
		  <boolProp name="quotedData">false</boolProp>
		  <boolProp name="recycle">true</boolProp>
		  <stringProp name="shareMode">shareMode.all</stringProp>
		  <boolProp name="stopThread">false</boolProp>
		  <stringProp name="variableNames">consumerKey,consumerSecret,username,password,accessToken,refreshToken</stringProp>
		  <boolProp name="ignoreFirstLine">false</boolProp>
		</CSVDataSet>
		<hashTree/>
		<CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
		  <collectionProp name="CookieManager.cookies"/>
		  <boolProp name="CookieManager.clearEachIteration">true</boolProp>
		  <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
		</CookieManager>
		<hashTree/>
		<HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Validate token" enabled="true">
		  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
		    <collectionProp name="Arguments.arguments">
		      <elementProp name="token" elementType="HTTPArgument">
			<boolProp name="HTTPArgument.always_encode">false</boolProp>
			<stringProp name="Argument.value">${accessToken}</stringProp>
			<stringProp name="Argument.metadata">=</stringProp>
			<boolProp name="HTTPArgument.use_equals">true</boolProp>
			<stringProp name="Argument.name">token</stringProp>
		      </elementProp>
		    </collectionProp>
		  </elementProp>
		  <stringProp name="HTTPSampler.domain">${is_host}</stringProp>
		  <stringProp name="HTTPSampler.port">${is_port}</stringProp>
		  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
		  <stringProp name="HTTPSampler.response_timeout"></stringProp>
		  <stringProp name="HTTPSampler.protocol">https</stringProp>
		  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
		  <stringProp name="HTTPSampler.path">/oauth2/introspect</stringProp>
		  <stringProp name="HTTPSampler.method">POST</stringProp>
		  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
		  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
		  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
		  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
		  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
		  <boolProp name="HTTPSampler.monitor">false</boolProp>
		  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
		</HTTPSamplerProxy>
		<hashTree>
		  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
		    <collectionProp name="HeaderManager.headers">
		      <elementProp name="" elementType="Header">
			<stringProp name="Header.name">Content-Type</stringProp>
			<stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
		      </elementProp>
		      <elementProp name="" elementType="Header">
			<stringProp name="Header.name">Authorization</stringProp>
			<stringProp name="Header.value">Basic ${adminCredentials}</stringProp>
		      </elementProp>
		    </collectionProp>
		  </HeaderManager>
		  <hashTree/>
		  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Active true assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1416819314">&quot;active&quot;:true</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="HTTP 200 OK Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1606201635">HTTP/1.1 200 OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Simple Data Writer" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">/home/ubuntu/scripts/results/400_14_9_introspection.jtl</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
